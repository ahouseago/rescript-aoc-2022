// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Core__Int = require("@rescript/core/src/Core__Int.js");
var Core__Array = require("@rescript/core/src/Core__Array.js");
var Core__Option = require("@rescript/core/src/Core__Option.js");

var input = Fs.readFileSync("./src/day04.txt", "utf8");

function completeOverlap(a, b, c, d) {
  if (Caml_obj.lessequal(a, c) && Caml_obj.greaterequal(b, d)) {
    return true;
  } else if (Caml_obj.greaterequal(a, c)) {
    return Caml_obj.lessequal(b, d);
  } else {
    return false;
  }
}

function overlap(a, b, c, d) {
  if (Caml_obj.lessequal(a, d)) {
    return Caml_obj.greaterequal(b, c);
  } else {
    return false;
  }
}

function calculate(fn) {
  return Core__Array.reduce(input.split("\n"), 0, (function (containedPairs, line) {
                var pair = line.split(/[,-]/).map(function (__x) {
                      return Core__Option.mapWithDefault(__x, 0, (function (str) {
                                    return Core__Option.getWithDefault(Core__Int.fromString(undefined, str), 0);
                                  }));
                    });
                if (pair.length !== 4) {
                  return containedPairs;
                }
                var a = pair[0];
                var b = pair[1];
                var c = pair[2];
                var d = pair[3];
                if (Curry._4(fn, a, b, c, d)) {
                  return containedPairs + 1 | 0;
                } else {
                  return containedPairs;
                }
              }));
}

console.log("Part 1:", calculate(completeOverlap));

console.log("Part 2:", calculate(overlap));

exports.input = input;
exports.completeOverlap = completeOverlap;
exports.overlap = overlap;
exports.calculate = calculate;
/* input Not a pure module */
